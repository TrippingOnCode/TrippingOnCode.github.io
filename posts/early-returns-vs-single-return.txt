3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["669","static/chunks/669-1310554c379159d6.js","517","static/chunks/app/posts/layout-87563aa515b5fa49.js"],""]
4:["slug","early-returns-vs-single-return","d"]
0:["nrEQKvJHkZzs6HYcoVD6w",[[["",{"children":["posts",{"children":[["slug","early-returns-vs-single-return","d"],{"children":["__PAGE__?{\"slug\":\"early-returns-vs-single-return\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["slug","early-returns-vs-single-return","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/62e03aa861d3a945.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","div",null,{"style":{"marginLeft":"auto","marginRight":"auto"},"children":[["$","header",null,{"className":"my-8","children":["$","h1",null,{"className":"__className_05000c text-3xl","children":["$","$L6",null,{"style":{"boxShadow":"none","textDecoration":"none","color":"inherit"},"href":"/","children":"Tripping on Code"}]}]}],["$","main",null,{"className":"","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","footer",null,{"className":"","children":["Â© ",2024," Tripping on Code"]}]]}],null],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/site.webmanifest"}],["$","meta",null,{"name":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary"}],["$","meta",null,{"name":"twitter:creator","content":"Avinash Krishna Kumar"}]]}],["$","body",null,{"className":"__className_f68def leading-7 w-2/3 max-w-2/3 mx-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bca99574867e3de4.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/934960e3e6708468.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L7"]]]]]
8:T2408,<p>When a developer is building an application of any complexity, they will have to write many conditional statements. Depending on the complexity of the problem, this can lead to heavy nesting of code.</p>
<p>For Example:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token function">GetPersonAge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhitespace</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhitespace</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">GetPerson</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CalculateAge</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">else</span> 
  <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"nameof(firstName) &#x26;&#x26; nameof(lastName) cannot be null"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The above function has a few flaws.</p>
<ol>
<li><strong>Readability</strong> - The code above is not very explicit in its intention. You need to read the entire method to realize that it returns null if no person is found.</li>
<li><strong>The nesting</strong> - The actual logic of the method is captured in the call to invoke calculateAge. This is hidden in the deepest level of nesting.</li>
</ol>
<h2>Functional Programming</h2>
<p>F# and other functional programming languages deal with this differently. In F#, an if statement is supposed to return a value. Take a look at the code below.</p>
<pre><code class="language-fsharp">let greatest a b c =
	if a >= b &#x26;&#x26; a >= c 
  	then a
  elif b >= a &#x26;&#x26; b >= c 
    then b
  else 
    c
</code></pre>
<p>The code above might be hard to read if you are unfamiliar with F#. But it makes a lot of sense. Let's break it down.</p>
<p><em>greatest</em> is a function that accepts three parameters, a, b and c, and returns the greatest of the three numbers. F# and many other functional programming languages do not have a return statement; it is assumed that all methods return something, and interestingly an if statement is no different. An if statement always returns a value. So in the code above, if a is greater than equal to b and c, it returns a.</p>
<p>This pattern makes a lot of sense. Let's try and apply this in C# and clean up the code.</p>
<h2>The GetPersonAge function with early returns</h2>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token function">GetPersonAge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">isNullOrWhitespace</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhitespace</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"nameof(firstName) &#x26;&#x26; nameof(lastName) cannot be null"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">GetPerson</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">CalculateAge</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>DateOfBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The function above is a lot cleaner. The first few lines of code deal with the exceptional cases. It. explicity states the cases when it throws an exception</p>
<h2>When to avoid Early Returns</h2>
<p>As with almost every rule, you should only use early returns when it adds to the code's maintainability and readability.</p>
<p>There are cases when early returns make the code harder to read, as described in the following cases.</p>
<ul>
<li>Suppose you have a method that sets other properties or member variables in the class. In this case, adding early returns can introduce bugs and make the code harder to follow.</li>
<li>When you have large if statements and many branching paths, here, early returns can be a detriment to readability.</li>
<li>If you have logic after the if statement that needs to be executed, early returns are definitely not going to work. However, you might consider breaking out the conditional logic into its own method if it makes sense.</li>
</ul>2:["$","main",null,{"children":[["$","h3",null,{"className":"font-bold","children":"Early Returns"}],["$","p",null,{"children":"January 12, 2021"}],["$","div",null,{"className":"page_postBody__sSgeO","dangerouslySetInnerHTML":{"__html":"$8"}}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Tripping on Code: Early Returns"}],["$","meta","3",{"name":"description","content":"How to write more readable code using early returns. "}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
