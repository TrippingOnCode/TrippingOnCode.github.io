3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["669","static/chunks/669-1310554c379159d6.js","517","static/chunks/app/posts/layout-87563aa515b5fa49.js"],""]
4:["slug","keyed-collections","d"]
0:["nrEQKvJHkZzs6HYcoVD6w",[[["",{"children":["posts",{"children":[["slug","keyed-collections","d"],{"children":["__PAGE__?{\"slug\":\"keyed-collections\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["slug","keyed-collections","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/62e03aa861d3a945.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","div",null,{"style":{"marginLeft":"auto","marginRight":"auto"},"children":[["$","header",null,{"className":"my-8","children":["$","h1",null,{"className":"__className_05000c text-3xl","children":["$","$L6",null,{"style":{"boxShadow":"none","textDecoration":"none","color":"inherit"},"href":"/","children":"Tripping on Code"}]}]}],["$","main",null,{"className":"","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","footer",null,{"className":"","children":["Â© ",2024," Tripping on Code"]}]]}],null],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/site.webmanifest"}],["$","meta",null,{"name":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary"}],["$","meta",null,{"name":"twitter:creator","content":"Avinash Krishna Kumar"}]]}],["$","body",null,{"className":"__className_f68def leading-7 w-2/3 max-w-2/3 mx-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bca99574867e3de4.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/934960e3e6708468.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L7"]]]]]
8:T492f,<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.keyedcollection-2?view=netcore-2.2">KeyedCollections</a> are a feature of .Net that I haven't seen used often in the wild. In my experience, dictionaries and hash tables are used in places where KeyedCollections are more appropriate.</p>
<p>A KeyedCollection has features of both dictionaries and collections. It stores data in an ordered structure (like a collection), but also allows item lookup by both indexes and keys. Keyed collections are appropriate when the key is present inside the object.</p>
<p>For instance, in the example below, a username uniquely identifies a person and is the most commonly used property to lookup users, therefore this is a good candidate for a KeyedCollection.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Username <span class="token operator">=</span> username<span class="token punctuation">;</span>
        FirstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        LastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Username <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Creating a KeyedCollection</h2>
<p>The KeyedCollection class is declared in the System.Collections.ObjectModel namespace as an abstract class. To create one, all we have to do is inherit from KeyedCollection&#x3C;TKey, TItem> and override the <em>GetKeyForItem</em> method.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>ObjectModel</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">HelloKeyedCollection<span class="token punctuation">.</span>Models</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">KeyedCollection<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Person<span class="token punctuation">></span></span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetKeyForItem</span><span class="token punctuation">(</span><span class="token class-name">Person</span> item<span class="token punctuation">)</span>
            <span class="token operator">=></span> item<span class="token punctuation">.</span>Username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Using a KeyedCollection</h2>
<p>Let's populate the People class with some data</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"mfriedman"</span><span class="token punctuation">,</span> <span class="token string">"Matthew"</span><span class="token punctuation">,</span> <span class="token string">"Friedman"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"mgrinch"</span><span class="token punctuation">,</span> <span class="token string">"Michael"</span><span class="token punctuation">,</span> <span class="token string">"Grinch"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"agrant"</span><span class="token punctuation">,</span> <span class="token string">"Alan"</span><span class="token punctuation">,</span> <span class="token string">"Grant"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"estatler"</span><span class="token punctuation">,</span> <span class="token string">"Ellie"</span><span class="token punctuation">,</span> <span class="token string">"Statler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Object Lookup</h3>
<p>Data in a KeyedCollection can be looked up either by an index or a key. Both lookups have an algorithmic complexity of O(1). An existence check can be performed using the Key as well.</p>
<pre class="language-csharp"><code class="language-csharp">
<span class="token comment">//Lookup by Key</span>
<span class="token class-name"><span class="token keyword">var</span></span> allan <span class="token operator">=</span> people<span class="token punctuation">[</span><span class="token string">"agrant"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Lookup by index</span>
<span class="token class-name"><span class="token keyword">var</span></span> allan <span class="token operator">=</span> people<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Existence Check</span>
<span class="token class-name"><span class="token keyword">var</span></span> doesMichaelExist <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"mgrinch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>JSON Serialization</h3>
<p>The KeyedCollection class inherits from Collection, and therefore serializing it into JSON returns a standard list. If the people object was serialized, it would return the following.</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">"Username"</span><span class="token operator">:</span> <span class="token string">"mfriedman"</span><span class="token punctuation">,</span>
    <span class="token property">"FirstName"</span><span class="token operator">:</span> <span class="token string">"Matthew"</span><span class="token punctuation">,</span>
    <span class="token property">"LastName"</span><span class="token operator">:</span> <span class="token string">"Friedman"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">"Username"</span><span class="token operator">:</span> <span class="token string">"mgrinch"</span><span class="token punctuation">,</span>
    <span class="token property">"FirstName"</span><span class="token operator">:</span> <span class="token string">"Michael"</span><span class="token punctuation">,</span>
    <span class="token property">"LastName"</span><span class="token operator">:</span> <span class="token string">"Grinch"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">"Username"</span><span class="token operator">:</span> <span class="token string">"agrant"</span><span class="token punctuation">,</span>
    <span class="token property">"FirstName"</span><span class="token operator">:</span> <span class="token string">"Alan"</span><span class="token punctuation">,</span>
    <span class="token property">"LastName"</span><span class="token operator">:</span> <span class="token string">"Grant"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">"Username"</span><span class="token operator">:</span> <span class="token string">"estatler"</span><span class="token punctuation">,</span>
    <span class="token property">"FirstName"</span><span class="token operator">:</span> <span class="token string">"Ellie"</span><span class="token punctuation">,</span>
    <span class="token property">"LastName"</span><span class="token operator">:</span> <span class="token string">"Statler"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre>
<p>This allows services/managers to work with and return a KeyedCollection and an API can return it to the caller without any additional steps.</p>
<h2>KeyedCollection without creating derived classes</h2>
<p>Creating a derived class every time we wish to use a KeyedCollection might seem like a pain however, it makes sense to create them for types that are going to be reused a lot. In cases where we don't have many instances of it, we can create a simple helper that will allow us to use KeyedCollections without deriving from it every time.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">SimpleKeyedCollection<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">KeyedCollection<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Func<span class="token punctuation">&#x3C;</span>TValue<span class="token punctuation">,</span> TKey<span class="token punctuation">></span></span> keySelector<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SimpleKeyedCollection</span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>TValue<span class="token punctuation">,</span> TKey<span class="token punctuation">></span><span class="token punctuation">></span></span> keySelector<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>keySelector <span class="token operator">=</span> keySelector<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">TKey</span> <span class="token function">GetKeyForItem</span><span class="token punctuation">(</span><span class="token class-name">TValue</span> item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">keySelector</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This class can be used to create KeyedCollections of any type. It is required to pass a key selector to it during construction. This class can be instantiated as follows</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> simpleKeyedCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleKeyedCollection<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Person<span class="token punctuation">></span></span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">;</span>

simpleKeyedCollection<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"mfriedman"</span><span class="token punctuation">,</span> <span class="token string">"Matthew"</span><span class="token punctuation">,</span> <span class="token string">"Friedman"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleKeyedCollection<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"mgrinch"</span><span class="token punctuation">,</span> <span class="token string">"Michael"</span><span class="token punctuation">,</span> <span class="token string">"Grinch"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleKeyedCollection<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"agrant"</span><span class="token punctuation">,</span> <span class="token string">"Alan"</span><span class="token punctuation">,</span> <span class="token string">"Grant"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleKeyedCollection<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"estatler"</span><span class="token punctuation">,</span> <span class="token string">"Ellie"</span><span class="token punctuation">,</span> <span class="token string">"Statler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Final Thoughts</h2>
<p>KeyedCollections should be used a lot more than it is. It is a very powerful collection that offers a lot of features at a very low cost. It does have a little more overhead than either a Collection or a dictionary however, in most cases, the added benefit of using it more than makes up for it.</p>2:["$","main",null,{"children":[["$","h3",null,{"className":"font-bold","children":"Keyed Collection in .Net"}],["$","p",null,{"children":"January 08, 2021"}],["$","div",null,{"className":"page_postBody__sSgeO","dangerouslySetInnerHTML":{"__html":"$8"}}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Tripping on Code: Keyed Collection in .Net"}],["$","meta","3",{"name":"description","content":"KeyedCollections are a feature of .Net that I havenât seen used often in the wild. In my experience, dictionaries and hash tables are usedâ¦"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
