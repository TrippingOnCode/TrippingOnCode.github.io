3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["669","static/chunks/669-1310554c379159d6.js","517","static/chunks/app/posts/layout-87563aa515b5fa49.js"],""]
4:["slug","yield-return-random","d"]
0:["nrEQKvJHkZzs6HYcoVD6w",[[["",{"children":["posts",{"children":[["slug","yield-return-random","d"],{"children":["__PAGE__?{\"slug\":\"yield-return-random\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["slug","yield-return-random","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/62e03aa861d3a945.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","div",null,{"style":{"marginLeft":"auto","marginRight":"auto"},"children":[["$","header",null,{"className":"my-8","children":["$","h1",null,{"className":"__className_05000c text-3xl","children":["$","$L6",null,{"style":{"boxShadow":"none","textDecoration":"none","color":"inherit"},"href":"/","children":"Tripping on Code"}]}]}],["$","main",null,{"className":"","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],["$","footer",null,{"className":"","children":["Â© ",2024," Tripping on Code"]}]]}],null],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"180x180","href":"/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/site.webmanifest"}],["$","meta",null,{"name":"og:type","content":"website"}],["$","meta",null,{"name":"twitter:card","content":"summary"}],["$","meta",null,{"name":"twitter:creator","content":"Avinash Krishna Kumar"}]]}],["$","body",null,{"className":"__className_f68def leading-7 w-2/3 max-w-2/3 mx-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bca99574867e3de4.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/934960e3e6708468.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L7"]]]]]
8:T273f,<p>One of the many warnings that Resharper throws at us is <em>Code Inspection: Possible multiple enumeration of IEnumerable</em>. When I was younger and much less experienced, this was one of those warnings that I never fully understood. Many of my methods returned IEnumerables rather than any of it's derivations. I started invoking <em>ToList</em> every time resharper complained, without completely understanding the reason for the warning. I understood that an IEnumerable could be lazily evaluated and that it could hurt performance to evaluate it again and again. I did not realize until recently that because of lazy evaluation, we could get vastly different results.</p>
<p>Consider the code below:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonGenerator</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&#x3C;</span>Person<span class="token punctuation">></span></span> <span class="token function">GetRandomPeople</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> maxCount<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>maxCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span>
            <span class="token punctuation">{</span>
                Id <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span><span class="token punctuation">,</span>
                Age <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">PersonGenerator</span> personGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PersonGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> randomPeople <span class="token operator">=</span> personGenerator<span class="token punctuation">.</span><span class="token function">GetRandomPeople</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> count1 <span class="token operator">=</span> randomPeople<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> count2 <span class="token operator">=</span> randomPeople<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Count1 = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count1</span><span class="token punctuation">}</span></span><span class="token string">, Count2 = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count2</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The code above outputs the following</p>
<pre><code>Count1 = 4, Count2 = 34
</code></pre>
<h2>Wait. What's happening here?</h2>
<p>The GetRandomPeople method uses yield return. This causes it to return a type which is lazily evaluated. Every time the Count() method is invoked, The GetRandomPeople method is invoked again. Since that method returns a random number of items, the counts are different for every enumeration of the IEnumerable.</p>
<p>The lazy evaluation of the IEnumerable is a very powerful feature, especially paired with a yield return, however to quote a tired old adage, "With great power comes great responsibility".</p>
<h3>How do I prevent this?</h3>
<ul>
<li>The first thing that should have been done is to realize that multiple enumeration was occuring and invoke ToList on it.</li>
<li>There is no reason for the GetRandomPeople method to either return an IEnumerable or use a yield return. The method should return
a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netcore-2.2">List</a>,
a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.readonlycollection-1?view=netcore-2.2">ReadOnlyCollection</a>
an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1?view=netcore-2.2">ImmutableList</a> or
any other concrete collection implementation.</li>
</ul>
<p>Microsoft has published a set of <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections">Guidelines for Collections</a> that is a must read for all developers.</p>2:["$","main",null,{"children":[["$","h3",null,{"className":"font-bold","children":"Consequences of Multiple Enumeration of an IEnumerable"}],["$","p",null,{"children":"January 02, 2021"}],["$","div",null,{"className":"page_postBody__sSgeO","dangerouslySetInnerHTML":{"__html":"$8"}}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Tripping on Code: Consequences of Multiple Enumeration of an IEnumerable"}],["$","meta","3",{"name":"description","content":"One of the many warnings that Resharper throws at us is Code Inspection: Possible multiple enumeration of IEnumerable. When I was youngerâ¦"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
