{"componentChunkName":"component---src-templates-blog-post-js","path":"/group-by-vs-to-lookup/","result":{"data":{"site":{"siteMetadata":{"title":"Tripping on Code","author":"Avinash"}},"markdownRemark":{"id":"f9a4f8e8-79af-5fd9-835a-772e0014c634","excerpt":"GroupBy and ToLookup methods are two methods found as extensions to IEnumerable on the System.Linq namespace seems to perform very similar operations. The main…","html":"<p>GroupBy and ToLookup methods are two methods found as extensions to <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-5.0\" target=\"_blank\" rel=\"nofollow\">IEnumerable<T></a> on the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq\" target=\"_blank\" rel=\"nofollow\">System.Linq</a> namespace seems to perform very similar operations. The main difference between them is that GroupBy performs deferred execution while ToLookup performs immediate execution. Take a look at the example below for more details.</p>\n<h2>The Setup</h2>\n<p>Let us create a record to hold our data type.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">record</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> firstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> lastName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> country<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">firstName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">lastName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">country</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then let’s set up a method to return a new Person object.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> firstNameRandomizer <span class=\"token operator\">=</span> RandomizerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetRandomizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FieldOptionsFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> lastNameRandomizer <span class=\"token operator\">=</span> RandomizerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetRandomizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FieldOptionsLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> countryRandomizer <span class=\"token operator\">=</span> RandomizerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetRandomizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FieldOptionsCountry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span>\n              <span class=\"token named-parameter punctuation\">firstName</span><span class=\"token punctuation\">:</span> firstNameRandomizer<span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token named-parameter punctuation\">lastName</span><span class=\"token punctuation\">:</span> lastNameRandomizer<span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token named-parameter punctuation\">country</span><span class=\"token punctuation\">:</span> countryRandomizer<span class=\"token punctuation\">.</span><span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The GetPersons method is an <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/iterators\" target=\"_blank\" rel=\"nofollow\">iterator</a> that will return as many persons as requested by the caller. </p>\n<p>Note: We are using the <a href=\"https://www.nuget.org/packages/RandomDataGenerator.Net/\" target=\"_blank\" rel=\"nofollow\">RandomDataGenerator.Net</a> package to generate random names and countries.</p>\n<h2>The differences</h2>\n<h3>Superficial Differences</h3>\n<p>Let’s try executing the above method with both GroupBy and ToLookup</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">// ToLookup</span>\n<span class=\"token class-name\">ILookup<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">></span></span> lookupResult <span class=\"token operator\">=</span> <span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLookup</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// GroupBy</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>IGrouping<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groupResult <span class=\"token operator\">=</span> <span class=\"token function\">GetPersons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The ToLookup method returns an ILookup&#x3C;string, Person>. An <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.ilookup-2?view=net-5.0\" target=\"_blank\" rel=\"nofollow\">ILookup&#x3C;TKey, TValue></a> is very similar to a <code class=\"language-text\">Dictionary&lt;string, IEnumerable&lt;Person&gt;</code>. So running <code class=\"language-text\">groupResult[&quot;United Kingdom&quot;]</code> returns an IEnumerable<Person> containing all the people living in the United Kingdom. </p>\n<p>The GroupBy method, on the other hand, returns an IEnumerable&#x3C;IGrouping&#x3C;string, Person>>. An <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.igrouping-2?view=net-5.0\" target=\"_blank\" rel=\"nofollow\">IGrouping&#x3C;TKey, TValue></a> also maps a single key to multiple values. However, we cannot use the indexer to find the value. If you want all the people who live in the UK, you will have to do the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token class-name\">IGrouping<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">></span></span> ukPeople <span class=\"token operator\">=</span> groupResult<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"United Kingdom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ukPeople is a collection that will contain all the people living in the United Kingdom. It has a property called Key, which includes the Key used to group these results. The United Kingdom, in this case.</p>\n<h3>Immediate Execution vs. Deferred Execution</h3>\n<p>The main difference is how they are executed. ToLookup is very similar to ToList, ToDictionary, or ToArray. The result is materialized immediately, and you can start working on the items. In the case of GroupBy, the result is only materialized when a method like ToList or ToArray is invoked.</p>\n<p>This becomes a factor when we are dealing with either Entity Framework or dealing with generator functions that return large datasets. </p>\n<p>ToLookup will pause all execution until the entire list is processed. GroupBy will only be processed as we loop through the result or invoke ToList.</p>\n<h4>Entity Framework and Deferred Execution</h4>\n<p>The difference between ToLookup and GroupBy are very easily explained when looking at Entity Framework.</p>\n<p>Let’s take a look at the following expression</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">// Query 1</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleInUkByGender <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>People<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Query 2</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleInUkByGender <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>People<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLookup</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above code gets translated into (rougly) the following SQL statements</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token comment\"># Query 1</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> People\n<span class=\"token keyword\">WHERE</span> Age <span class=\"token operator\">></span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> Gender\n\n<span class=\"token comment\"># Query 2</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> People\n<span class=\"token keyword\">WHERE</span> Age <span class=\"token operator\">></span> <span class=\"token number\">18</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>For Query 1, the grouping is done in the database server.\nFor Query 2, the grouping is done in memory in the application and not in the database server.</p>\n<h3>Which should I use?</h3>\n<p>There are many factors that should be taken into consideration when making such a decision, but I can provide a general rule here that could work well.</p>\n<ul>\n<li>If you are using an ORM to write a Query, GroupBy will generally perform better because it gets translated into SQL and performed in the database server.</li>\n<li>If you are dealing with IEnumerable<T> or IQueryable<T>, use GroupBy. An IEnumerable indicates the possibility of deferred execution. So using GroupBy will hold off the execution until it is needed.</li>\n<li>When dealing with Lists, Collections, Dictionary, Hashsets or any other type that requires the data to be materialized, use ToLookup. It’s easier to use and the syntax is cleaner.</li>\n</ul>","frontmatter":{"title":"ToLookup vs. GroupBy","date":"January 31, 2021","description":""}}},"pageContext":{"slug":"/group-by-vs-to-lookup/","previous":{"fields":{"slug":"/early-returns-vs-single-return/"},"frontmatter":{"title":"Early Returns"}},"next":{"fields":{"slug":"/endpoint-routing/"},"frontmatter":{"title":"Endpoint Routing & Minimal API"}}}},"staticQueryHashes":["426816048","63159454"]}