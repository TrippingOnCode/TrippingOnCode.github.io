{"componentChunkName":"component---src-templates-blog-post-js","path":"/keyed-collections/","webpackCompilationHash":"472a62f59638b1e6931d","result":{"data":{"site":{"siteMetadata":{"title":"Tripping on Code","author":"Avinash"}},"markdownRemark":{"id":"56045c42-e57c-5567-a194-647cf64538e2","excerpt":"KeyedCollections are a feature of .Net that I haven’t seen used often in the wild. In my experience, dictionaries and hash tables are used in places where…","html":"<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.keyedcollection-2?view=netcore-2.2\" target=\"_blank\" rel=\"nofollow\">KeyedCollections</a> are a feature of .Net that I haven’t seen used often in the wild. In my experience, dictionaries and hash tables are used in places where KeyedCollections are more appropriate.</p>\n<p>A KeyedCollection has features of both dictionaries and collections. It stores data in an ordered structure (like a collection), but also allows item lookup by both indexes and keys. Keyed collections are appropriate when the key is present inside the object.</p>\n<p>For instance, in the example below, a username uniquely identifies a person and is the most commonly used property to lookup users, therefore this is a good candidate for a KeyedCollection.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span> lastName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        FirstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n        LastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Username <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> FirstName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> LastName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Creating a KeyedCollection</h2>\n<p>The KeyedCollection class is declared in the System.Collections.ObjectModel namespace as an abstract class. To create one, all we have to do is inherit from KeyedCollection&#x3C;TKey, TItem> and override the <em>GetKeyForItem</em> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>ObjectModel<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> HelloKeyedCollection<span class=\"token punctuation\">.</span>Models\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">KeyedCollection</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> Person<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">string</span> <span class=\"token function\">GetKeyForItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> item<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Using a KeyedCollection</h2>\n<p>Let’s populate the People class with some data</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token class-name\">People</span> people <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mfriedman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Matthew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Friedman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mgrinch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grinch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agrant\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"estatler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ellie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Statler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Object Lookup</h3>\n<p>Data in a KeyedCollection can be looked up either by an index or a key. Both lookups have an algorithmic complexity of O(1). An existence check can be performed using the Key as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">//Lookup by Key</span>\n<span class=\"token keyword\">var</span> allan <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span><span class=\"token string\">\"agrant\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Lookup by index</span>\n<span class=\"token keyword\">var</span> allan <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Existence Check</span>\n<span class=\"token keyword\">var</span> doesMichaelExist <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mgrinch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>JSON Serialization</h3>\n<p>The KeyedCollection class inherits from Collection<TItem>, and therefore serializing it into JSON returns a standard list. If the people object was serialized, it would return the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mfriedman\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FirstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matthew\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"LastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Friedman\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mgrinch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FirstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"LastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Grinch\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"agrant\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FirstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alan\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"LastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Grant\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"estatler\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FirstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ellie\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"LastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Statler\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This allows services/managers to work with and return a KeyedCollection and an API can return it to the caller without any additional steps.</p>\n<h2>KeyedCollection without creating derived classes</h2>\n<p>Creating a derived class every time we wish to use a KeyedCollection might seem like a pain however, it makes sense to create them for types that are going to be reused a lot. In cases where we don’t have many instances of it, we can create a simple helper that will allow us to use KeyedCollections without deriving from it every time.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleKeyedCollection</span><span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> KeyedCollection<span class=\"token operator\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> Func<span class=\"token operator\">&lt;</span>TValue<span class=\"token punctuation\">,</span> TKey<span class=\"token operator\">></span> keySelector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">SimpleKeyedCollection</span><span class=\"token punctuation\">(</span>Expression<span class=\"token operator\">&lt;</span>Func<span class=\"token operator\">&lt;</span>TValue<span class=\"token punctuation\">,</span> TKey<span class=\"token operator\">>></span> keySelector<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keySelector <span class=\"token operator\">=</span> keySelector<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token class-name\">TKey</span> <span class=\"token function\">GetKeyForItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TValue</span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">keySelector</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This class can be used to create KeyedCollections of any type. It is required to pass a key selector to it during construction. This class can be instantiated as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> simpleKeyedCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">SimpleKeyedCollection</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsimpleKeyedCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mfriedman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Matthew\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Friedman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsimpleKeyedCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mgrinch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grinch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsimpleKeyedCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"agrant\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsimpleKeyedCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"estatler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ellie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Statler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Final Thoughts</h2>\n<p>KeyedCollections should be used a lot more than it is. It is a very powerful collection that offers a lot of features at a very low cost. It does have a little more overhead than either a Collection or a dictionary however, in most cases, the added benefit of using it more than makes up for it.</p>","frontmatter":{"title":"Keyed Collection in .Net","date":"July 28, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/keyed-collections/","previous":{"fields":{"slug":"/yield-return-random/"},"frontmatter":{"title":"Consequences of Multiple Enumeration of an IEnumerable"}},"next":{"fields":{"slug":"/early-returns-vs-single-return/"},"frontmatter":{"title":"Early Returns."}}}}}